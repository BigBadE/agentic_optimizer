[workspace]
resolver = "3"
members = [
    "crates/*",
    "crates/merlin-languages/languages/*",
    "benchmarks/crates/*"
]

[workspace.package]
version = "0.1.0"
edition = "2024"

[workspace.dependencies]
# Internal workspace crates
merlin-core = { path = "crates/merlin-core" }
merlin-providers = { path = "crates/merlin-providers" }
merlin-context = { path = "crates/merlin-context" }
merlin-languages = { path = "crates/merlin-languages" }
merlin-agent = { path = "crates/merlin-agent" }
merlin-tools = { path = "crates/merlin-tools" }
merlin-routing = { path = "crates/merlin-routing" }
merlin-local = { path = "crates/merlin-local" }
rust-backend = { path = "crates/merlin-languages/languages/rust-backend" }

# External dependencies
anyhow = "1.0"
async-trait = "0.1"
thiserror = "2.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
walkdir = "2.5"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "2.0"
toml = "0.9"
clap = { version = "4.5", features = ["derive"] }
tokio = { version = "1.47", features = ["full"] }
reqwest = { version = "0.12", features = ["json", "blocking"] }
indicatif = "0.18"
ollama-rs = "0.3"
console = "0.16"
dialoguer = "0.12"
ignore = "0.4"
chrono = "0.4"
uuid = { version = "1.18", features = ["v4", "serde"] }
petgraph = "0.8"
futures = "0.3"
regex = "1.11"
dirs = "6.0"

# Still using older versions for tui-textarea support
ratatui = "0.29"
crossterm = "0.28"
tui-textarea = "0.7"
textwrap = "0.16"
unicode-segmentation = "1.12"
unicode-width = "0.2"

flate2 = "1.1"
tempfile = "3.23"
rquickjs = { version = "0.9", features = ["array-buffer", "classes", "futures", "loader", "macro", "parallel", "properties"] }

# Testing dependencies
criterion = { version = "0.7", features = ["html_reports", "async_tokio"] }
gungraun = "0.17"
assert_cmd = "2.0"
predicates = "3.1"

# Rust analyzer integration
ra_ap_ide = "0.0"
ra_ap_ide_db = "0.0"
ra_ap_hir = "0.0"
ra_ap_syntax = "0.0"
ra_ap_vfs = "0.0"
ra_ap_paths = "0.0"
ra_ap_project_model = "0.0"
ra_ap_load-cargo = "0.0"

[profile.dev]
opt-level = 1
lto = false

[profile.dev.package."*"]
opt-level = 3

[profile.release]
codegen-units = 1
lto = "thin"
panic = "abort"
overflow-checks = false
strip = "symbols"

[profile.bench]
debug = true
strip = false

[workspace.lints.rust]
unsafe_code = "deny"
warnings = "deny"
future-incompatible = "deny"
let-underscore = "deny"
nonstandard-style = "deny"
refining-impl-trait = "deny"
unused = { level = "deny", priority = -1 }
missing_docs = "deny"

[workspace.lints.rustdoc]
broken_intra_doc_links = "deny"

# Strict lints, should not be changed.
[workspace.lints.clippy]
all = "deny"
complexity = "deny"
correctness = "deny"
nursery = "deny"
pedantic = "deny"
perf = "deny"
style = "deny"
suspicious = "deny"

# Complexity
only_used_in_recursion = { level = "allow", priority = 1 }

# Nursery
missing_const_for_fn = { level = "allow", priority = 1 }

# Pedantic
cast_possible_truncation = { level = "allow", priority = 1 }
cast_possible_wrap = { level = "allow", priority = 1 }
cast_precision_loss = { level = "allow", priority = 1 }
cast_sign_loss = { level = "allow", priority = 1 }
must_use_candidate = { level = "allow", priority = 1 }
wildcard_imports = { level = "allow", priority = 1 }

# Restriction
absolute_paths = { level = "deny", priority = 1 }
allow_attributes_without_reason = { level = "deny", priority = 1 }
assertions_on_result_states = { level = "deny", priority = 1 }
clone_on_ref_ptr = { level = "deny", priority = 1 }
expect_used = { level = "deny", priority = 1 }
if_then_some_else_none = { level = "deny", priority = 1 }
let_underscore_must_use = { level = "deny", priority = 1 }
min_ident_chars = { level = "deny", priority = 1 }
multiple_inherent_impl = { level = "deny", priority = 1 }
mutex_atomic = { level = "deny", priority = 1 }
mutex_integer = { level = "deny", priority = 1 }
print_stderr = { level = "deny", priority = 1 }
print_stdout = { level = "deny", priority = 1 }
redundant_type_annotations = { level = "deny", priority = 1 }
renamed_function_params = { level = "deny", priority = 1 }
rest_pat_in_fully_bound_structs = { level = "deny", priority = 1 }
return_and_then = { level = "deny", priority = 1 }
same_name_method = { level = "deny", priority = 1 }
self_named_module_files = { level = "deny", priority = 1 }
semicolon_inside_block = { level = "deny", priority = 1 }
separated_literal_suffix = { level = "deny", priority = 1 }
shadow_unrelated = { level = "deny", priority = 1 }
single_char_lifetime_names = { level = "deny", priority = 1 }
string_lit_chars_any = { level = "deny", priority = 1 }
tests_outside_test_module = { level = "deny", priority = 1 }
todo = { level = "deny", priority = 1 }
try_err = { level = "deny", priority = 1 }
undocumented_unsafe_blocks = { level = "deny", priority = 1 }
unimplemented = { level = "deny", priority = 1 }
unnecessary_safety_comment = { level = "deny", priority = 1 }
unnecessary_safety_doc = { level = "deny", priority = 1 }
unnecessary_self_imports = { level = "deny", priority = 1 }
unneeded_field_pattern = { level = "deny", priority = 1 }
unreachable = { level = "deny", priority = 1 }
unused_result_ok = { level = "deny", priority = 1 }
unused_trait_names = { level = "deny", priority = 1 }
unwrap_used = { level = "deny", priority = 1 }