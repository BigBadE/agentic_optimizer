{
  "name": "Parallel Task Execution",
  "description": "Agent creates task list with independent parallel tasks that can run concurrently",
  "initial_query": "Create a web API with user and product endpoints",
  "mock_responses": [
    {
      "pattern": "Create a web API with user and product endpoints",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<TaskList> {",
        "  return {",
        "    id: \"web_api\",",
        "    title: \"Create web API with user and product endpoints\",",
        "    steps: [",
        "      {",
        "        id: \"user_model\",",
        "        step_type: \"Feature\",",
        "        description: \"Create user model and handlers\",",
        "        verification: \"User module compiles and exports types\"",
        "      },",
        "      {",
        "        id: \"product_model\",",
        "        step_type: \"Feature\",",
        "        description: \"Create product model and handlers\",",
        "        verification: \"Product module compiles and exports types\"",
        "      },",
        "      {",
        "        id: \"router\",",
        "        step_type: \"Feature\",",
        "        description: \"Create API router combining both endpoints\",",
        "        verification: \"Router compiles and integrates both modules\"",
        "      },",
        "      {",
        "        id: \"tests\",",
        "        step_type: \"Test\",",
        "        description: \"Write integration tests\",",
        "        verification: \"Integration tests pass\"",
        "      }",
        "    ]",
        "  };",
        "}",
        "```"
      ]
    },
    {
      "pattern": "Create user model and handlers",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  const code = `#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]",
        "pub struct User {",
        "    pub id: u64,",
        "    pub name: String,",
        "    pub email: String,",
        "}",
        "",
        "pub fn create_user() -> User {",
        "    User { id: 1, name: \"John\".to_string(), email: \"john@example.com\".to_string() }",
        "}`;",
        "  await bash(`echo '${code}' > src/user.rs`);",
        "  return \"Created user.rs with User struct and handlers\";",
        "}",
        "```"
      ]
    },
    {
      "pattern": "Create product model and handlers",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  const code = `#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]",
        "pub struct Product {",
        "    pub id: u64,",
        "    pub name: String,",
        "    pub price: f64,",
        "}",
        "",
        "pub fn create_product() -> Product {",
        "    Product { id: 1, name: \"Widget\".to_string(), price: 9.99 }",
        "}`;",
        "  await bash(`echo '${code}' > src/product.rs`);",
        "  return \"Created product.rs with Product struct and handlers\";",
        "}",
        "```"
      ]
    },
    {
      "pattern": "Create API router combining both endpoints",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  const code = `mod user;",
        "mod product;",
        "",
        "pub fn create_router() {",
        "    println!(\"Router combining user and product endpoints\");",
        "}`;",
        "  await bash(`echo '${code}' > src/router.rs`);",
        "  return \"Created router.rs combining user and product routes\";",
        "}",
        "```"
      ]
    },
    {
      "pattern": "Write integration tests",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  const tests = `#[cfg(test)]",
        "mod tests {",
        "    #[test]",
        "    fn test_api_integration() {",
        "        assert!(true);",
        "    }",
        "}`;",
        "  await bash(`mkdir -p tests && echo '${tests}' > tests/api_tests.rs`);",
        "  return \"Created tests/api_tests.rs with integration tests\";",
        "}",
        "```"
      ]
    }
  ],
  "expected_task_list": {
    "total_tasks": 4,
    "task_descriptions": [
      "Create user model and handlers",
      "Create product model and handlers",
      "Create API router combining both endpoints",
      "Write integration tests"
    ],
    "dependency_chain": [[], [], [1, 2], [3]]
  },
  "expected_outcomes": {
    "all_tasks_completed": true,
    "files_created": [
      "src/user.rs",
      "src/product.rs",
      "src/router.rs",
      "tests/api_tests.rs"
    ],
    "tests_passed": true
  }
}
