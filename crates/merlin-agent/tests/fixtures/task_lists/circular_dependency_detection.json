{
  "name": "Circular Dependency Detection",
  "description": "Agent should detect and handle circular dependencies gracefully",
  "initial_query": "Create a system where Task A depends on Task B, and Task B depends on Task A",
  "mock_responses": [
    {
      "pattern": "Task A depends on Task B",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<TaskList> {",
        "  // Agent should detect this is impossible and refuse or restructure",
        "  return {",
        "    id: \"circular_detect\",",
        "    title: \"Circular dependency example\",",
        "    steps: [",
        "      {",
        "        id: \"task_a\",",
        "        step_type: \"Feature\",",
        "        description: \"Task A that cannot depend on itself\",",
        "        verification: \"Should fail or be restructured\"",
        "      }",
        "    ]",
        "  };",
        "}",
        "```"
      ]
    }
  ],
  "expected_task_list": {
    "total_tasks": 1,
    "task_descriptions": [
      "Task A"
    ],
    "dependency_chain": [[]]
  },
  "expected_outcomes": {
    "all_tasks_completed": true,
    "files_created": [],
    "tests_passed": true
  }
}
