{
  "name": "context_topic_boundary_negative",
  "description": "Test that files from completely different topics are NOT included",
  "tags": [
    "context",
    "conservative",
    "negative"
  ],
  "setup": {
    "files": {
      "src/frontend/components.rs": "pub struct Button {\n    label: String,\n    onclick: Box<dyn Fn()>,\n}\n\nimpl Button {\n    pub fn render(&self) -> String {\n        format!(\"<button>{}</button>\", self.label)\n    }\n}",
      "src/backend/database.rs": "use sqlx::PgPool;\n\npub struct Database {\n    pool: PgPool,\n}\n\nimpl Database {\n    pub async fn query(&self, sql: &str) -> Result<Vec<Row>> {\n        sqlx::query(sql).fetch_all(&self.pool).await\n    }\n}",
      "src/backend/migrations.rs": "pub fn run_migrations() -> Result<()> {\n    // Run database migrations\n    Ok(())\n}",
      "src/frontend/styles.rs": "pub struct Theme {\n    primary_color: String,\n    font_size: u32,\n}"
    }
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Show me the database query implementation",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "database",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  // Should find backend/database.rs and maybe migrations.rs",
          "  // but NOT frontend files (components.rs, styles.rs)",
          "  return 'Found database implementation in src/backend/database.rs';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "string"
        },
        "ui": {
          "output_contains": [
            "database"
          ]
        }
      }
    }
  ],
  "final_verify": {
    "execution": {},
    "ui": {
      "all_tasks_completed": true
    }
  }
}
