{
  "name": "context_builder_integration",
  "description": "Test full context builder integration with file scanning and prioritization",
  "tags": [
    "context",
    "builder",
    "integration"
  ],
  "setup": {
    "files": {
      "src/main.rs": "mod database;\nmod api;\nmod config;\n\nfn main() {\n    let config = config::load();\n    let db = database::connect(&config.db_url);\n    api::start_server(config.port, db);\n}",
      "src/database.rs": "pub fn connect(url: &str) -> Database {\n    Database::new(url)\n}\n\npub struct Database {\n    url: String,\n}",
      "src/api.rs": "pub fn start_server(port: u16, db: Database) {\n    // Server logic\n}",
      "src/config.rs": "pub fn load() -> Config {\n    Config {\n        port: 8080,\n        db_url: \"postgres://localhost\".to_string(),\n    }\n}\n\npub struct Config {\n    pub port: u16,\n    pub db_url: String,\n}",
      "tests/integration_test.rs": "use my_app::database;\n\n#[test]\nfn test_database_connection() {\n    let db = database::connect(\"test_url\");\n    assert!(db.is_valid());\n}"
    }
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Show me the application startup code",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "startup",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  return 'Application starts in src/main.rs, loads config, connects to database, and starts API server';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "string"
        },
        "ui": {
          "output_contains": [
            "main.rs",
            "config",
            "database"
          ]
        }
      }
    }
  ],
  "final_verify": {
    "execution": {},
    "ui": {
      "all_tasks_completed": true
    }
  }
}
