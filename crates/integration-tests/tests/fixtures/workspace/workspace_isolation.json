{
  "name": "Workspace Isolation and File Copying",
  "description": "Tests isolated build environment creation, workspace file copying with exclusions, nested directory structures, and isolation between multiple environments",
  "tags": [
    "workspace",
    "isolation",
    "file_copying"
  ],
  "setup": {
    "files": {
      "Cargo.toml": "[package]\nname = \"test-project\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]",
      "src/lib.rs": "pub fn hello() -> String { String::from(\"hello\") }",
      "src/module/submodule/deep.rs": "// deep file in nested structure",
      "README.md": "# Test Project",
      "target/dummy.txt": "should not copy",
      ".git/config": "git config"
    },
    "terminal_size": [
      80,
      24
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Test workspace isolation by copying files and verifying exclusions",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test workspace isolation",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  // Simulate workspace isolation operations",
          "  const workspace = createIsolatedWorkspace();",
          "  await workspace.copyFiles();",
          "  ",
          "  // Verify essential files were copied",
          "  const cargoExists = await fileExists('Cargo.toml');",
          "  const libExists = await fileExists('src/lib.rs');",
          "  const readmeExists = await fileExists('README.md');",
          "  const deepExists = await fileExists('src/module/submodule/deep.rs');",
          "  ",
          "  // Verify excluded directories were NOT copied",
          "  const targetExists = await fileExists('target/dummy.txt');",
          "  const gitExists = await fileExists('.git/config');",
          "  ",
          "  return `Workspace isolation verified. Essential files copied: ${cargoExists && libExists && readmeExists && deepExists}. Excluded files not copied: ${!targetExists && !gitExists}. Nested structure preserved: ${deepExists}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true
        },
        "files": [
          {
            "path": "Cargo.toml",
            "exists": true,
            "contains": [
              "name = \"test-project\""
            ]
          },
          {
            "path": "src/lib.rs",
            "exists": true,
            "contains": [
              "pub fn hello"
            ]
          },
          {
            "path": "README.md",
            "exists": true,
            "contains": [
              "# Test Project"
            ]
          },
          {
            "path": "src/module/submodule/deep.rs",
            "exists": true,
            "contains": [
              "// deep file"
            ]
          }
        ]
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test multiple isolated environments remain independent",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "multiple isolated environments",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  // Create two isolated environments",
          "  const env1 = createIsolatedWorkspace('env1');",
          "  const env2 = createIsolatedWorkspace('env2');",
          "  ",
          "  await env1.copyFiles();",
          "  await env2.copyFiles();",
          "  ",
          "  // Modify files differently in each environment",
          "  await env1.writeFile('src/lib.rs', '// env1 modification');",
          "  await env2.writeFile('src/lib.rs', '// env2 modification');",
          "  ",
          "  // Verify isolation",
          "  const env1Content = await env1.readFile('src/lib.rs');",
          "  const env2Content = await env2.readFile('src/lib.rs');",
          "  const originalContent = await readFile('src/lib.rs');",
          "  ",
          "  const isolated = env1Content.includes('env1') && env2Content.includes('env2') && originalContent.includes('hello');",
          "  ",
          "  return `Multiple environments isolated: ${isolated}. Env1 has env1 content, Env2 has env2 content, original unchanged.`;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true
        },
        "files": [
          {
            "path": "src/lib.rs",
            "exists": true,
            "contains": [
              "pub fn hello"
            ],
            "not_contains": [
              "env1",
              "env2"
            ]
          }
        ]
      }
    }
  ],
  "final_verify": {
    "execution": {
      "all_tasks_completed": true
    },
    "files": [
      {
        "path": "Cargo.toml",
        "exists": true
      },
      {
        "path": "src/lib.rs",
        "exists": true,
        "contains": [
          "pub fn hello"
        ]
      },
      {
        "path": "src/module/submodule/deep.rs",
        "exists": true
      },
      {
        "path": "README.md",
        "exists": true
      }
    ]
  }
}
