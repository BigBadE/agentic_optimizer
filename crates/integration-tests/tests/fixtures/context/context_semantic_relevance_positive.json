{
  "name": "context_semantic_relevance_positive",
  "description": "Test that semantically relevant files ARE included even without exact keyword matches",
  "tags": [
    "context",
    "positive",
    "semantic"
  ],
  "setup": {
    "files": {
      "src/cache.rs": "use std::collections::HashMap;\nuse std::time::{Duration, Instant};\n\npub struct Cache<K, V> {\n    data: HashMap<K, (V, Instant)>,\n    ttl: Duration,\n}\n\nimpl<K, V> Cache<K, V> {\n    pub fn insert(&mut self, key: K, value: V) {\n        self.data.insert(key, (value, Instant::now()));\n    }\n    \n    pub fn get(&self, key: &K) -> Option<&V> {\n        self.data.get(key).and_then(|(v, time)| {\n            if time.elapsed() < self.ttl {\n                Some(v)\n            } else {\n                None\n            }\n        })\n    }\n}",
      "src/storage.rs": "use std::collections::BTreeMap;\n\npub struct Storage {\n    items: BTreeMap<String, Vec<u8>>,\n}\n\nimpl Storage {\n    pub fn store(&mut self, key: String, data: Vec<u8>) {\n        self.items.insert(key, data);\n    }\n    \n    pub fn retrieve(&self, key: &str) -> Option<&Vec<u8>> {\n        self.items.get(key)\n    }\n}",
      "src/network.rs": "use tokio::net::TcpStream;\n\npub async fn connect(addr: &str) -> Result<TcpStream> {\n    TcpStream::connect(addr).await\n}"
    }
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Find code that stores and retrieves data temporarily",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "store",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  // Should find cache.rs (temporary storage) and storage.rs",
          "  // but NOT network.rs (unrelated to data storage)",
          "  return 'Found caching and storage implementations';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "string"
        },
        "ui": {
          "output_contains": [
            "storage"
          ]
        }
      }
    }
  ],
  "final_verify": {
    "execution": {},
    "ui": {
      "all_tasks_completed": true
    }
  }
}
