{
  "name": "Orchestrator Task Dependencies",
  "description": "Tests orchestrator handling of task dependencies, sequential execution, and cyclic dependency detection",
  "tags": [
    "orchestrator",
    "dependencies",
    "error-handling"
  ],
  "setup": {
    "files": {},
    "env_vars": {
      "MERLIN_FOLDER": "__temp__"
    },
    "terminal_size": [
      120,
      40
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Execute Task A",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Task A",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  return 'Task A completed successfully';",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Execute Task B which depends on Task A",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Task B",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  return 'Task B completed after Task A';",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Execute multiple requests: Create a function, Write a test, Add documentation",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "multiple requests",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const results = [];",
          "  results.push('Created function: fn example() {}');",
          "  results.push('Written test: #[test] fn test_example() {}');",
          "  results.push('Added documentation: /// Example function');",
          "  return results.join('\\n');",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    }
  ],
  "final_verify": {
    "execution": {}
  }
}
