{
  "name": "Workspace File Operations",
  "description": "Tests file changes (create, modify, delete) applied to isolated environments while keeping original workspace untouched",
  "tags": [
    "workspace",
    "file_ops",
    "isolation"
  ],
  "setup": {
    "files": {
      "Cargo.toml": "[package]\nname = \"test-project\"\nversion = \"0.1.0\"\nedition = \"2021\"",
      "src/lib.rs": "pub fn hello() -> String { String::from(\"hello\") }",
      "README.md": "# Original README"
    },
    "terminal_size": [
      80,
      24
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Apply file changes to isolated environment - create, modify, and verify original untouched",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Apply file changes",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const workspace = createIsolatedWorkspace();",
          "  await workspace.copyFiles();",
          "  ",
          "  // Apply file changes in isolated environment",
          "  await workspace.writeFile('src/lib.rs', 'pub fn hello() -> String { String::from(\"modified\") }');",
          "  await workspace.writeFile('src/new_module.rs', 'pub fn new_function() {}');",
          "  ",
          "  // Verify changes in isolated environment",
          "  const modifiedContent = await workspace.readFile('src/lib.rs');",
          "  const newFileContent = await workspace.readFile('src/new_module.rs');",
          "  ",
          "  // Verify original workspace is untouched",
          "  const originalContent = await readFile('src/lib.rs');",
          "  const newFileExistsInOriginal = await fileExists('src/new_module.rs');",
          "  ",
          "  const isolated = modifiedContent.includes('modified') && ",
          "                   newFileContent.includes('new_function') && ",
          "                   originalContent.includes('hello') && ",
          "                   !originalContent.includes('modified') && ",
          "                   !newFileExistsInOriginal;",
          "  ",
          "  return `File changes applied to isolated env. Modified: ${modifiedContent.includes('modified')}. New file created: ${newFileContent.includes('new_function')}. Original untouched: ${!originalContent.includes('modified')}. Isolation verified: ${isolated}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true
        },
        "files": [
          {
            "path": "src/lib.rs",
            "exists": true,
            "contains": [
              "pub fn hello() -> String { String::from(\"hello\") }"
            ],
            "not_contains": [
              "modified"
            ]
          }
        ]
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test all file change operations: create, modify, delete",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "all file change operations",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const workspace = createIsolatedWorkspace();",
          "  await workspace.copyFiles();",
          "  ",
          "  // Test Create operation",
          "  await workspace.writeFile('src/created.rs', '// created');",
          "  const created = await workspace.fileExists('src/created.rs');",
          "  ",
          "  // Test Modify operation",
          "  await workspace.writeFile('src/lib.rs', '// modified');",
          "  const modifiedContent = await workspace.readFile('src/lib.rs');",
          "  const modified = modifiedContent.includes('// modified');",
          "  ",
          "  // Test Delete operation",
          "  await workspace.deleteFile('README.md');",
          "  const deleted = !(await workspace.fileExists('README.md'));",
          "  ",
          "  // Verify original workspace unchanged",
          "  const originalReadme = await fileExists('README.md');",
          "  const originalLib = await readFile('src/lib.rs');",
          "  const originalUntouched = originalReadme && originalLib.includes('hello');",
          "  ",
          "  return `File operations complete. Created: ${created}. Modified: ${modified}. Deleted: ${deleted}. Original untouched: ${originalUntouched}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true
        },
        "files": [
          {
            "path": "src/lib.rs",
            "exists": true,
            "contains": [
              "pub fn hello"
            ],
            "not_contains": [
              "// modified"
            ]
          },
          {
            "path": "README.md",
            "exists": true,
            "contains": [
              "# Original README"
            ]
          }
        ]
      }
    }
  ],
  "final_verify": {
    "execution": {
      "all_tasks_completed": true
    },
    "files": [
      {
        "path": "src/lib.rs",
        "exists": true,
        "contains": [
          "pub fn hello() -> String { String::from(\"hello\") }"
        ]
      },
      {
        "path": "README.md",
        "exists": true,
        "contains": [
          "# Original README"
        ]
      }
    ]
  }
}
