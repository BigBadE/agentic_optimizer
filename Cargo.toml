cargo-features = ["codegen-backend"]

[workspace]
resolver = "3"
members = [
    "crates/*",
    "crates/agentic-languages/languages/*"
]

[workspace.package]
version = "0.1.0"
edition = "2024"

[workspace.dependencies]
# Internal workspace crates
agentic-core = { path = "crates/agentic-core" }
agentic-providers = { path = "crates/agentic-providers" }
agentic-context = { path = "crates/agentic-context" }
agentic-languages = { path = "crates/agentic-languages" }
agentic-agent = { path = "crates/agentic-agent" }
rust-backend = { path = "crates/agentic-languages/languages/rust-backend" }

# External dependencies
anyhow = "1.0"
thiserror = "2.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
walkdir = "2.5"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"
toml = "0.8"
clap = { version = "4", features = ["derive"] }
tokio = { version = "1", features = ["full"] }
reqwest = { version = "0.12", features = ["json", "blocking"] }
indicatif = "0.17"
ollama-rs = "0.2"
console = "0.15"
dialoguer = "0.11"
ignore = "0.4"

# Rust analyzer integration
ra_ap_ide = "0.0.231"
ra_ap_ide_db = "0.0.231"
ra_ap_hir = "0.0.231"
ra_ap_syntax = "0.0.231"
ra_ap_vfs = "0.0.231"
ra_ap_paths = "0.0.231"
ra_ap_project_model = "0.0.231"
ra_ap_load-cargo = "0.0.231"


[profile.dev]
opt-level = 1
lto = false

[profile.dev.package."*"]
opt-level = 3
codegen-backend = "cranelift"

[workspace.lints.rust]
unsafe_code = "forbid"
warnings = "deny"
future-incompatible = "deny"
let-underscore = "deny"
nonstandard-style = "deny"
refining-impl-trait = "deny"
unused = { level = "deny", priority = -1 }

# Strict lints, should not be changed.
[workspace.lints.clippy]
all = "deny"
cargo = "deny"
complexity = "deny"
correctness = "deny"
nursery = "deny"
pedantic = "deny"
perf = "deny"
restriction = "deny"
style = "deny"
suspicious = "deny"
as_conversions = { level = "allow", priority = 1 }
allow_attributes = { level = "allow", priority = 1 }
arbitrary_source_item_ordering = { level = "allow", priority = 1 }
cast_precision_loss = { level = "allow", priority = 1 }
else_if_without_else = { level = "allow", priority = 1 }
multiple_crate_versions = { level = "allow", priority = 1 }
module_name_repetitions = { level = "allow", priority = 1 }
mod_module_files = { level = "allow", priority = 1 }
blanket_clippy_restriction_lints = { level = "allow", priority = 1 }
iter_over_hash_type = { level = "allow", priority = 1 }
cargo_common_metadata = { level = "allow", priority = 1 }
cast_possible_truncation = { level = "allow", priority = 1 }
std_instead_of_core = { level = "allow", priority = 1 }
default_numeric_fallback = { level = "allow", priority = 1 }
error_impl_error = { level = "allow", priority = 1 }
integer_division = { level = "allow", priority = 1 }
integer_division_remainder_used = { level = "allow", priority = 1 }
only_used_in_recursion = { level = "allow", priority = 1 }
cast_sign_loss = { level = "allow", priority = 1 }
missing_docs_in_private_items = { level = "allow", priority = 1 }
pub_with_shorthand = { level = "allow", priority = 1 }
exhaustive_structs = { level = "allow", priority = 1 }
unseparated_literal_suffix = { level = "allow", priority = 1 }
pattern_type_mismatch = { level = "allow", priority = 1 }
std_instead_of_alloc = { level = "allow", priority = 1 }
shadow_reuse = { level = "allow", priority = 1 }
map_err_ignore = { level = "allow", priority = 1 }
indexing_slicing = { level = "allow", priority = 1 }
missing_inline_in_public_items = { level = "allow", priority = 1 }
future_not_send = { level = "allow", priority = 1 }
self_named_module_files = { level = "allow", priority = 1 }
significant_drop_tightening = { level = "allow", priority = 1 }
arithmetic_side_effects = { level = "allow", priority = 1 }
missing-trait-methods = { level = "allow", priority = 1 }
float_arithmetic = { level = "allow", priority = 1 }
pub_use = { level = "allow", priority = 1 }
must_use_candidate = { level = "allow", priority = 1 }
exhaustive_enums = { level = "allow", priority = 1 }
too-long-first-doc-paragraph = { level = "allow", priority = 1 }
implicit_return = { level = "allow", priority = 1 }
single_call_fn = { level = "allow", priority = 1 }
question_mark_used = { level = "allow", priority = 1 }
wildcard_imports = { level = "allow", priority = 1 }
wildcard_enum_match_arm = { level = "allow", priority = 1 }
implicit_hasher = { level = "allow", priority = 1 }