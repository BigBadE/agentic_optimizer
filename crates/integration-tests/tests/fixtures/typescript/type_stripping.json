{
  "name": "TypeScript Type Stripping",
  "description": "Tests that TypeScript type annotations are properly stripped and transpiled to JavaScript",
  "tags": [
    "typescript",
    "types",
    "transpilation"
  ],
  "setup": {
    "files": {},
    "env_vars": {},
    "terminal_size": [
      80,
      24
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Test variable type annotations",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test variable type annotations",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "const x: number = 42;",
          "const y: string = \"hello\";",
          "const z: boolean = true;",
          "return { x, y, z };"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test interface definitions",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test interface definitions",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "interface Person {",
          "  name: string;",
          "  age: number;",
          "}",
          "",
          "const person: Person = {",
          "  name: \"Alice\",",
          "  age: 30",
          "};",
          "",
          "return person;"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test type aliases",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test type aliases",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "type Result = {",
          "  success: boolean;",
          "  data: string;",
          "};",
          "",
          "const result: Result = {",
          "  success: true,",
          "  data: \"test\"",
          "};",
          "",
          "return result;"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test function parameter types",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test function parameter types",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "function add(a: number, b: number): number {",
          "  return a + b;",
          "}",
          "",
          "function greet(name: string, age: number): string {",
          "  return `Hello ${name}, you are ${age} years old`;",
          "}",
          "",
          "return {",
          "  sum: add(10, 20),",
          "  greeting: greet(\"Bob\", 25)",
          "};"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test arrow function types",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test arrow function types",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "const multiply = (a: number, b: number): number => a * b;",
          "const isAdult = (age: number): boolean => age >= 18;",
          "",
          "return {",
          "  product: multiply(6, 7),",
          "  adult: isAdult(20),",
          "  child: isAdult(15)",
          "};"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test array types and generics",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test array types and generics",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "const numbers: number[] = [1, 2, 3, 4, 5];",
          "const strings: Array<string> = [\"a\", \"b\", \"c\"];",
          "",
          "return {",
          "  numbers: numbers.map((n: number): number => n * 2),",
          "  strings: strings.map((s: string): string => s.toUpperCase())",
          "};"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test generic functions",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test generic functions",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "function identity<T>(arg: T): T {",
          "  return arg;",
          "}",
          "",
          "function first<T>(arr: T[]): T | undefined {",
          "  return arr[0];",
          "}",
          "",
          "return {",
          "  num: identity<number>(42),",
          "  str: identity<string>(\"hello\"),",
          "  firstNum: first<number>([1, 2, 3]),",
          "  firstStr: first<string>([\"a\", \"b\", \"c\"])",
          "};"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test enum handling",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test enum handling",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "enum Status {",
          "  Pending = 0,",
          "  Success = 1,",
          "  Error = 2",
          "}",
          "",
          "const current: Status = Status.Success;",
          "",
          "return { status: current };"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test union types",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test union types",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "type StringOrNumber = string | number;",
          "",
          "function process(value: StringOrNumber): string {",
          "  if (typeof value === \"string\") {",
          "    return \"String: \" + value;",
          "  } else {",
          "    return \"Number: \" + value;",
          "  }",
          "}",
          "",
          "return {",
          "  str: process(\"hello\"),",
          "  num: process(42)",
          "};"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test type casting",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test type casting",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "const value = \"hello\" as any;",
          "const length = (value as string).length;",
          "",
          "return { length };"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test optional parameters",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test optional parameters",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "function greet(name: string, greeting?: string): string {",
          "  return (greeting || \"Hello\") + \", \" + name;",
          "}",
          "",
          "return {",
          "  default: greet(\"World\"),",
          "  custom: greet(\"World\", \"Hi\")",
          "};"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test readonly properties",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test readonly properties",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "interface Config {",
          "  readonly name: string;",
          "  readonly version: number;",
          "}",
          "",
          "const config: Config = {",
          "  name: \"test\",",
          "  version: 1",
          "};",
          "",
          "return config;"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "object"
        }
      }
    }
  ],
  "final_verify": {
    "execution": {}
  }
}
