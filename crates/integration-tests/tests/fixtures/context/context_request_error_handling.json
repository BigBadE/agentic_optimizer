{
  "name": "Context Request Error Handling and Edge Cases",
  "description": "Tests context request error handling: large files, path traversal, tracker functionality, empty results",
  "tags": [
    "context",
    "tools",
    "error-handling",
    "edge-cases"
  ],
  "setup": {
    "files": {
      "small.txt": "Small file content\n",
      "data/nested/deep.rs": "// Deeply nested file\nfn deep() {}\n",
      "safe/allowed.txt": "Safe content"
    },
    "terminal_size": [
      80,
      24
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Request context for small file",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "small file",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('small.txt', 'Testing basic file request');",
          "  if (result.success && result.files.length > 0) {",
          "    return `File size: ${result.files[0].size} bytes, Content: ${result.files[0].content.trim()}`;",
          "  }",
          "  return 'Failed to get file';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_value_matches": "File size:"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Request deeply nested file",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "deeply nested",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('data/nested/deep.rs', 'Testing nested path resolution');",
          "  if (result.success && result.files.length > 0) {",
          "    return `Found nested file: ${result.files[0].path}`;",
          "  }",
          "  return 'Nested file not found';",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Try path traversal",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "path traversal",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('../../etc/passwd', 'Attempting path traversal');",
          "  return `Result: success=${result.success}, files=${result.files.length}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Request with wildcard that matches nothing",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "matches nothing",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('*.nonexistent', 'Pattern with no matches');",
          "  return `Success: ${result.success}, Files: ${result.files.length}, Message: ${result.message}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Request with max_files=1",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "max_files=1",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('*.txt', 'Testing max_files=1', 1);",
          "  return `Files returned: ${result.files.length}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_value_matches": "Files returned: 1"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Request same file multiple times",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "same file multiple times",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const r1 = await requestContext('small.txt', 'First request');",
          "  const r2 = await requestContext('small.txt', 'Second request');",
          "  const r3 = await requestContext('small.txt', 'Third request');",
          "  return `All successful: ${r1.success && r2.success && r3.success}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_value_matches": "All successful: true"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Mix glob patterns",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Mix glob patterns",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const txt = await requestContext('**/*.txt', 'Get all txt');",
          "  const rs = await requestContext('**/*.rs', 'Get all rs');",
          "  return `TXT: ${txt.files.length}, RS: ${rs.files.length}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test file size tracking",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "file size tracking",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('small.txt', 'Check size field');",
          "  if (result.files.length > 0) {",
          "    const hasSize = typeof result.files[0].size === 'number';",
          "    return `Has size field: ${hasSize}`;",
          "  }",
          "  return 'No files';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_value_matches": "Has size field: true"
        }
      }
    }
  ],
  "final_verify": {
    "execution": {},
    "files": [
      {
        "path": "small.txt",
        "exists": true
      },
      {
        "path": "data/nested/deep.rs",
        "exists": true
      }
    ]
  }
}
