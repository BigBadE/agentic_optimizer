{
  "name": "Workspace Build Validation",
  "description": "Tests running cargo check/build in isolated environments, handling syntax errors, and command timeouts",
  "tags": [
    "workspace",
    "build",
    "validation",
    "cargo"
  ],
  "setup": {
    "files": {
      "Cargo.toml": "[package]\nname = \"test-project\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]",
      "src/lib.rs": "pub fn hello() -> String { String::from(\"hello\") }"
    },
    "terminal_size": [
      80,
      24
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Run cargo check in isolated environment and verify it succeeds",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Run cargo check",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const workspace = createIsolatedWorkspace();",
          "  await workspace.copyFiles();",
          "  ",
          "  // Run cargo check in isolated environment",
          "  const result = await workspace.runCommand('cargo', ['check', '--quiet'], 60000);",
          "  const success = result.exitCode === 0;",
          "  ",
          "  return `Cargo check ${success ? 'succeeded' : 'failed'} in isolated environment. Exit code: ${result.exitCode}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test build with syntax error to verify validation catches errors",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "build with syntax error",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const workspace = createIsolatedWorkspace();",
          "  await workspace.copyFiles();",
          "  ",
          "  // Introduce syntax error in isolated environment",
          "  await workspace.writeFile('src/lib.rs', 'pub fn hello() -> String { this is invalid syntax }');",
          "  ",
          "  // Run cargo check - should fail",
          "  try {",
          "    const result = await workspace.runCommand('cargo', ['check', '--quiet'], 60000);",
          "    const failed = result.exitCode !== 0;",
          "    return `Cargo check correctly failed with syntax error: ${failed}. Exit code: ${result.exitCode}`;",
          "  } catch (error) {",
          "    return `Cargo check failed as expected: ${error.message}`;",
          "  }",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true
        },
        "files": [
          {
            "path": "src/lib.rs",
            "exists": true,
            "contains": [
              "pub fn hello() -> String { String::from(\"hello\") }"
            ],
            "not_contains": [
              "invalid syntax"
            ]
          }
        ]
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test command timeout handling",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "command timeout",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const workspace = createIsolatedWorkspace();",
          "  await workspace.copyFiles();",
          "  ",
          "  // Run command with very short timeout",
          "  try {",
          "    const result = await workspace.runCommand('cargo', ['check'], 1);",
          "    return `Command completed quickly or timed out as expected`;",
          "  } catch (error) {",
          "    if (error.message.includes('timeout')) {",
          "      return `Command timeout handled correctly: ${error.message}`;",
          "    }",
          "    return `Command handled: ${error.message}`;",
          "  }",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true
        }
      }
    }
  ],
  "final_verify": {
    "execution": {
      "all_tasks_completed": true
    },
    "files": [
      {
        "path": "Cargo.toml",
        "exists": true
      },
      {
        "path": "src/lib.rs",
        "exists": true,
        "contains": [
          "pub fn hello() -> String { String::from(\"hello\") }"
        ]
      }
    ]
  }
}
