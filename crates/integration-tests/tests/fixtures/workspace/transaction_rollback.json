{
  "name": "Workspace Transaction and Rollback",
  "description": "Tests TaskWorkspace transaction support with create, modify, delete operations and error handling for missing files",
  "tags": [
    "workspace",
    "transaction",
    "rollback"
  ],
  "setup": {
    "files": {
      "Cargo.toml": "[package]\nname = \"test-project\"\nversion = \"0.1.0\"\nedition = \"2021\"",
      "src/lib.rs": "pub fn original() -> i32 { 42 }",
      "src/existing.rs": "// Existing file"
    },
    "terminal_size": [
      80,
      24
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Test workspace create operation",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "create operation",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  await writeFile('src/new_file.rs', '// New file created');",
          "  return 'File created successfully';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_executed": true
        },
        "files": [
          {
            "path": "src/new_file.rs",
            "exists": true,
            "contains": [
              "// New file created"
            ]
          }
        ]
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test workspace modify operation",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "modify operation",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  await writeFile('src/lib.rs', 'pub fn modified() -> i32 { 100 }');",
          "  return 'File modified successfully';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_executed": true
        },
        "files": [
          {
            "path": "src/lib.rs",
            "exists": true,
            "contains": [
              "pub fn modified",
              "100"
            ],
            "not_contains": [
              "original",
              "42"
            ]
          }
        ]
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test workspace delete operation",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "delete operation",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  await deleteFile('src/existing.rs');",
          "  return 'File deleted successfully';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_executed": true
        },
        "files": [
          {
            "path": "src/existing.rs",
            "exists": false
          }
        ]
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test read operation on created file",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "read operation",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const content = await readFile('src/new_file.rs');",
          "  return `Read content: ${content}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_executed": true
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test read on nonexistent file throws error",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "nonexistent file",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  try {",
          "    const content = await readFile('src/does_not_exist.rs');",
          "    return 'Error: should have thrown';",
          "  } catch (error) {",
          "    return 'Correctly threw error for missing file';",
          "  }",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_executed": true,
          "return_value_matches": "Correctly threw error"
        }
      }
    }
  ],
  "final_verify": {
    "execution": {
      "all_tasks_completed": true
    },
    "files": [
      {
        "path": "src/new_file.rs",
        "exists": true
      },
      {
        "path": "src/lib.rs",
        "exists": true,
        "contains": [
          "modified"
        ]
      },
      {
        "path": "src/existing.rs",
        "exists": false
      }
    ]
  }
}
