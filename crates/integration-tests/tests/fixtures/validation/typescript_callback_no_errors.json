{
  "name": "TypeScript Callback - No Errors Pattern",
  "description": "Test TypeScript callback that validates absence of error patterns",
  "tags": ["validation", "typescript_callback", "exit_requirement", "error_check"],
  "setup": {
    "files": {},
    "terminal_size": [120, 40]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Create clean output file",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Create clean output file",
        "match_type": "exact"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<any> {",
          "  return {",
          "    title: 'Create clean output file',",
          "    steps: [",
          "      {",
          "        title: 'Create output',",
          "        description: 'Write output.log without errors',",
          "        step_type: 'implementation',",
          "        exit_requirement: async () => {",
          "          const content = await readFile('output.log');",
          "          const errorPatterns = ['ERROR', 'FAIL', 'panic!'];",
          "          for (const pattern of errorPatterns) {",
          "            if (content.includes(pattern)) {",
          "              throw new Error(`Found error pattern: ${pattern}`);",
          "            }",
          "          }",
          "        }",
          "      }",
          "    ]",
          "  };",
          "}"
        ]
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Write output.log without errors",
        "match_type": "exact"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const log = 'INFO: Process started\\nINFO: Task completed successfully\\nINFO: Process finished';",
          "  await writeFile('output.log', log);",
          "  return 'Created clean output.log';",
          "}"
        ]
      },
      "verify": {
        "files": [
          {
            "path": "output.log",
            "exists": true
          }
        ]
      }
    }
  ],
  "final_verify": {
    "files": [
      {
        "path": "output.log",
        "exists": true,
        "contains": ["INFO"]
      }
    ]
  }
}
