{
  "name": "Syntax Validation Errors",
  "description": "Tests validation pipeline detecting syntax errors in agent responses",
  "tags": ["validation", "syntax", "errors"],
  "setup": {
    "files": {},
    "terminal_size": [80, 24]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Write a function with a syntax error",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "syntax error",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const code = 'fn broken() {\\n  if true {\\n    println!(\"test\");\\n  // Missing closing brace';",
          "  await writeFile('broken.rs', code);",
          "  return code;",
          "}"
        ]
      },
      "verify": {
        "files": [
          {
            "path": "broken.rs",
            "exists": true,
            "contains": ["Missing closing brace"]
          }
        ],
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Write code with mismatched parentheses",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "mismatched parentheses",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const code = 'fn calculate((x: i32) -> i32 {\\n  x + 1\\n}';",
          "  await writeFile('calc.rs', code);",
          "  return code;",
          "}"
        ]
      },
      "verify": {
        "files": [
          {
            "path": "calc.rs",
            "exists": true
          }
        ],
        "execution": {}
      }
    }
  ],
  "final_verify": {
    "files": [
      {
        "path": "broken.rs",
        "exists": true
      },
      {
        "path": "calc.rs",
        "exists": true
      }
    ]
  }
}
