{
  "name": "Sequential Task Dependencies",
  "description": "Tests sequential execution with dependencies",
  "initial_query": "Create a module with function and tests",
  "mock_responses": [
    {
      "pattern": "Create a module with function and tests",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<TaskList> {",
        "  return {",
        "    id: \"module_creation\",",
        "    title: \"Create module with tests\",",
        "    steps: [",
        "      {",
        "        id: \"create_function\",",
        "        step_type: \"Feature\",",
        "        description: \"Create the main function\",",
        "        verification: \"Function exists\"",
        "      },",
        "      {",
        "        id: \"add_tests\",",
        "        step_type: \"Test\",",
        "        description: \"Add tests for the function\",",
        "        verification: \"Tests added\",",
        "        depends_on: [\"create_function\"]",
        "      },",
        "      {",
        "        id: \"add_docs\",",
        "        step_type: \"Documentation\",",
        "        description: \"Add documentation\",",
        "        verification: \"Docs added\",",
        "        depends_on: [\"create_function\"]",
        "      }",
        "    ]",
        "  };",
        "}",
        "```"
      ],
      "expected_tool_calls": [],
      "use_once": true,
      "should_fail": false
    },
    {
      "pattern": "Create the main function",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  await writeFile('src/module.rs', 'pub fn process(x: i32) -> i32 { x * 2 }');",
        "  return \"Created main function\";",
        "}",
        "```"
      ],
      "expected_tool_calls": [
        {
          "tool": "writeFile",
          "args_pattern": "module.rs",
          "result_pattern": null
        }
      ],
      "use_once": true,
      "should_fail": false
    },
    {
      "pattern": "Add tests for the function",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  const content = await readFile('src/module.rs');",
        "  const withTests = content + '\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n    #[test]\\n    fn test_process() {\\n        assert_eq!(process(5), 10);\\n    }\\n}';",
        "  await writeFile('src/module.rs', withTests);",
        "  return \"Added tests\";",
        "}",
        "```"
      ],
      "expected_tool_calls": [
        {
          "tool": "readFile",
          "args_pattern": "module.rs",
          "result_pattern": null
        },
        {
          "tool": "writeFile",
          "args_pattern": "module.rs",
          "result_pattern": null
        }
      ],
      "use_once": true,
      "should_fail": false
    },
    {
      "pattern": "Add documentation",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  const content = await readFile('src/module.rs');",
        "  const withDocs = '/// Process a value by doubling it\\n' + content;",
        "  await writeFile('src/module.rs', withDocs);",
        "  return \"Added documentation\";",
        "}",
        "```"
      ],
      "expected_tool_calls": [
        {
          "tool": "readFile",
          "args_pattern": "module.rs",
          "result_pattern": null
        },
        {
          "tool": "writeFile",
          "args_pattern": "module.rs",
          "result_pattern": null
        }
      ],
      "use_once": true,
      "should_fail": false
    }
  ],
  "expected_task_list": {
    "total_tasks": 3,
    "task_descriptions": [
      "Create the main function",
      "Add tests",
      "Add documentation"
    ],
    "dependency_chain": [[], [1], [1]]
  },
  "expected_outcomes": {
    "all_tasks_completed": true,
    "files": [
      {
        "path": "src/module.rs",
        "contains": [
          "pub fn process",
          "#[test]",
          "test_process",
          "///"
        ],
        "not_contains": [],
        "exact_content": null,
        "must_exist": true,
        "must_not_exist": false
      }
    ],
    "validation_passed": true,
    "response": {
      "contains": ["module"],
      "not_contains": [],
      "min_length": 10
    },
    "min_tool_calls": 5,
    "max_tool_calls": 15,
    "min_provider_calls": 3,
    "max_provider_calls": 6
  },
  "setup_files": {},
  "env_vars": {},
  "tags": ["sequential", "dependencies", "task_list"]
}
