{
  "name": "Context Request Advanced Features",
  "description": "Tests advanced context request features: file size metadata, file size limits, TypeScript integration, error handling with invalid parameters, and content verification",
  "tags": [
    "context",
    "advanced",
    "typescript",
    "tools"
  ],
  "setup": {
    "files": {
      "src/lib.rs": "//! Main library\npub mod executor;\npub mod parser;\n",
      "src/executor.rs": "//! Executor module\npub struct Executor;\n",
      "src/parser.rs": "//! Parser module\npub struct Parser;\n",
      "small.txt": "Small file content"
    },
    "terminal_size": [
      80,
      24
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Check file metadata",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Check file metadata",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('src/lib.rs', 'Check file metadata');",
          "  if (result.success && result.files.length > 0) {",
          "    const file = result.files[0];",
          "    const sizeMatch = file.size === file.content.length;",
          "    return `File size: ${file.size}, matches content: ${sizeMatch}`;",
          "  }",
          "  return 'No file found';",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Verify executor content",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Verify executor content",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('src/executor.rs', 'Verify content is read correctly');",
          "  if (result.success && result.files.length > 0) {",
          "    const file = result.files[0];",
          "    const hasModule = file.content.includes('Executor module');",
          "    const hasStruct = file.content.includes('pub struct Executor');",
          "    return `Has module comment: ${hasModule}, has struct: ${hasStruct}`;",
          "  }",
          "  return 'File not found';",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test TypeScript glob pattern",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "TypeScript glob pattern",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('**/*.rs', 'Get all Rust files', 10);",
          "  return `Success: ${result.success}, Count: ${result.files.length}, Message: ${result.message}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Try invalid parameters",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "invalid parameters",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  try {",
          "    // Missing required 'reason' parameter - should fail",
          "    const result = await requestContext('src/lib.rs');",
          "    return `Unexpected success: ${result.success}`;",
          "  } catch (error) {",
          "    return `Caught error as expected: ${error.message}`;",
          "  }",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_value_matches": "Caught error as expected"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Verify default max_files",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "default max_files",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('**/*.rs', 'Testing default max_files');",
          "  const withinLimit = result.files.length <= 5;",
          "  return `Found ${result.files.length} files, within default limit of 5: ${withinLimit}`;",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test TypeScript return structure",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "TypeScript return structure",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  const result = await requestContext('src/lib.rs', 'Testing from TypeScript');",
          "  return JSON.stringify({",
          "    done: true,",
          "    found: result.success,",
          "    fileCount: result.files.length",
          "  });",
          "}"
        ]
      },
      "verify": {
        "execution": {}
      }
    }
  ],
  "final_verify": {
    "execution": {},
    "files": [
      {
        "path": "src/lib.rs",
        "exists": true,
        "contains": [
          "Main library"
        ]
      },
      {
        "path": "src/executor.rs",
        "exists": true,
        "contains": [
          "Executor module",
          "pub struct Executor"
        ]
      },
      {
        "path": "src/parser.rs",
        "exists": true
      },
      {
        "path": "small.txt",
        "exists": true
      }
    ]
  }
}
