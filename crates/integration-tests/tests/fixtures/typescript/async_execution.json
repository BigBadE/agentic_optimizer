{
  "name": "TypeScript Async Execution",
  "description": "Tests async/await patterns, Promise return types, and multiple async bash calls with processing",
  "tags": [
    "typescript",
    "async",
    "promises",
    "bash"
  ],
  "setup": {
    "files": {},
    "env_vars": {},
    "terminal_size": [
      80,
      24
    ],
    "tools": [
      "BashTool"
    ]
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Execute async function with Promise return type",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Execute async function with Promise return type",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  let r = await bash(\"echo 'Hello World'\");",
          "  return r.stdout;",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true,
          "tools_called": [
            "bash"
          ],
          "return_type": "string",
          "return_value_matches": "Hello World\n"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Execute async with conditional error handling",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Execute async with conditional error handling",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  let r = await bash(\"echo 'TODO: test'\");",
          "  if (r.stderr) return \"Error searching TODOs: \" + r.stderr;",
          "  return r.stdout || \"No TODOs found in the codebase\";",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_executed": true,
          "tools_called": [
            "bash"
          ],
          "return_value_matches": "TODO: test\n"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Execute multiple async bash calls with processing",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Execute multiple async bash calls with processing",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<object> {",
          "  const result1: any = await bash(\"echo 'first'\");",
          "  const result2: any = await bash(\"echo 'second'\");",
          "  const output: string = result1.stdout + \" \" + result2.stdout;",
          "  return {",
          "    done: true,",
          "    output: output.trim()",
          "  };",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_executed": true,
          "tools_called": [
            "bash"
          ],
          "return_type": "object"
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test grep with error fallback",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test grep with error fallback",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  let r = await bash(\"grep -r TODO . --exclude-dir=target 2>&1 || echo 'No matches'\");",
          "  if (r.stderr) return \"Error searching TODOs: \" + r.stderr;",
          "  return r.stdout || \"No TODOs found in the codebase\";",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_executed": true,
          "tools_called": [
            "bash"
          ]
        }
      }
    },
    {
      "type": "user_input",
      "data": {
        "text": "Test async with interfaces and type guards",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "Test async with interfaces and type guards",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "interface CommandResult {",
          "  stdout: string;",
          "  stderr: string;",
          "  exit_code: number;",
          "}",
          "",
          "async function agent_code(): Promise<object> {",
          "  const result: CommandResult = await bash(\"echo 'test output'\") as CommandResult;",
          "  const processed: string = result.stdout.trim();",
          "  const success: boolean = result.exit_code === 0;",
          "  return {",
          "    done: success,",
          "    data: processed,",
          "    message: success ? \"Success\" : \"Failed\"",
          "  };",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "typescript_parsed": true,
          "typescript_executed": true,
          "tools_called": [
            "bash"
          ],
          "return_type": "object"
        }
      }
    }
  ],
  "final_verify": {
    "execution": {
      "all_tasks_completed": true,
      "validation_passed": true
    }
  }
}
