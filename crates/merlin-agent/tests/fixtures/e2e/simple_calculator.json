{
  "name": "Simple Calculator Implementation",
  "description": "Tests full E2E flow: task decomposition -> execution -> validation",
  "initial_query": "Implement a simple calculator function that adds two numbers",
  "mock_responses": [
    {
      "pattern": "Implement a simple calculator",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<TaskList> {",
        "  return {",
        "    id: \"calc_impl\",",
        "    title: \"Implement calculator with add function\",",
        "    steps: [",
        "      {",
        "        id: \"create_file\",",
        "        step_type: \"Feature\",",
        "        description: \"Create calculator.rs with add function\",",
        "        verification: \"File exists with correct function signature\"",
        "      },",
        "      {",
        "        id: \"write_tests\",",
        "        step_type: \"Test\",",
        "        description: \"Add unit tests for add function\",",
        "        verification: \"Tests are present and compile\"",
        "      }",
        "    ]",
        "  };",
        "}",
        "```"
      ],
      "expected_tool_calls": [],
      "use_once": true,
      "should_fail": false
    },
    {
      "pattern": "Create calculator.rs with add function",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  const code = `pub fn add(a: i32, b: i32) -> i32 {\\n    a + b\\n}`;",
        "  await writeFile('src/calculator.rs', code);",
        "  return \"Created calculator.rs with add function\";",
        "}",
        "```"
      ],
      "expected_tool_calls": [
        {
          "tool": "writeFile",
          "args_pattern": "calculator.rs",
          "result_pattern": null
        }
      ],
      "use_once": true,
      "should_fail": false
    },
    {
      "pattern": "Add unit tests for add function",
      "response": [
        "```typescript",
        "async function agent_code(): Promise<string> {",
        "  const tests = `\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn test_add_positive() {\\n        assert_eq!(add(2, 3), 5);\\n    }\\n\\n    #[test]\\n    fn test_add_negative() {\\n        assert_eq!(add(-2, -3), -5);\\n    }\\n}`;",
        "  const existing = await readFile('src/calculator.rs');",
        "  await writeFile('src/calculator.rs', existing + tests);",
        "  return \"Added unit tests to calculator.rs\";",
        "}",
        "```"
      ],
      "expected_tool_calls": [
        {
          "tool": "readFile",
          "args_pattern": "calculator.rs",
          "result_pattern": null
        },
        {
          "tool": "writeFile",
          "args_pattern": "calculator.rs",
          "result_pattern": null
        }
      ],
      "use_once": true,
      "should_fail": false
    }
  ],
  "expected_task_list": {
    "total_tasks": 2,
    "task_descriptions": [
      "Create calculator.rs with add function",
      "Add unit tests for add function"
    ],
    "dependency_chain": [[], [1]]
  },
  "expected_outcomes": {
    "all_tasks_completed": true,
    "files": [
      {
        "path": "src/calculator.rs",
        "contains": [
          "pub fn add",
          "a + b",
          "#[test]",
          "test_add_positive",
          "assert_eq!(add(2, 3), 5)"
        ],
        "not_contains": [
          "TODO",
          "unimplemented"
        ],
        "exact_content": null,
        "must_exist": true,
        "must_not_exist": false
      }
    ],
    "validation_passed": true,
    "response": {
      "contains": [
        "calculator",
        "add"
      ],
      "not_contains": [
        "error",
        "failed"
      ],
      "min_length": 10
    },
    "min_tool_calls": 2,
    "max_tool_calls": 10,
    "min_provider_calls": 2,
    "max_provider_calls": 5
  },
  "setup_files": {},
  "env_vars": {},
  "tags": ["basic", "calculator", "task_list"]
}
