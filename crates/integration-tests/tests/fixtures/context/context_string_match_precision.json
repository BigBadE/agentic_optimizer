{
  "name": "context_string_match_precision",
  "description": "Test that specific string matches in code ARE found and included",
  "tags": [
    "context",
    "positive",
    "precision"
  ],
  "setup": {
    "files": {
      "src/error_handler.rs": "use std::fmt;\n\npub enum AppError {\n    DatabaseError(String),\n    ValidationError(String),\n    NotFoundError(String),\n}\n\nimpl fmt::Display for AppError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match self {\n            AppError::DatabaseError(msg) => write!(f, \"Database error: {}\", msg),\n            AppError::ValidationError(msg) => write!(f, \"Validation error: {}\", msg),\n            AppError::NotFoundError(msg) => write!(f, \"Not found: {}\", msg),\n        }\n    }\n}",
      "src/handlers.rs": "pub fn handle_request() -> Result<()> {\n    Ok(())\n}",
      "src/middleware.rs": "pub fn logger_middleware() {\n    println!(\"Request logged\");\n}"
    }
  },
  "events": [
    {
      "type": "user_input",
      "data": {
        "text": "Find where ValidationError is defined",
        "submit": true
      }
    },
    {
      "type": "llm_response",
      "trigger": {
        "pattern": "ValidationError",
        "match_type": "contains"
      },
      "response": {
        "typescript": [
          "async function agent_code(): Promise<string> {",
          "  // Should find error_handler.rs with ValidationError enum variant",
          "  return 'Found ValidationError in src/error_handler.rs';",
          "}"
        ]
      },
      "verify": {
        "execution": {
          "return_type": "string"
        },
        "ui": {
          "output_contains": [
            "ValidationError",
            "error_handler"
          ]
        }
      }
    }
  ],
  "final_verify": {
    "execution": {},
    "ui": {
      "all_tasks_completed": true
    }
  }
}
